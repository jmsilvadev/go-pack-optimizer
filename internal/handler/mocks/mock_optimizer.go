// Code generated by MockGen. DO NOT EDIT.
// Source: optimizer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	optimizer "github.com/jmsilvadev/go-pack-optimizer/pkg/optimizer"
)

// MockOptimizerInterface is a mock of OptimizerInterface interface.
type MockOptimizerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOptimizerInterfaceMockRecorder
}

// MockOptimizerInterfaceMockRecorder is the mock recorder for MockOptimizerInterface.
type MockOptimizerInterfaceMockRecorder struct {
	mock *MockOptimizerInterface
}

// NewMockOptimizerInterface creates a new mock instance.
func NewMockOptimizerInterface(ctrl *gomock.Controller) *MockOptimizerInterface {
	mock := &MockOptimizerInterface{ctrl: ctrl}
	mock.recorder = &MockOptimizerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptimizerInterface) EXPECT() *MockOptimizerInterfaceMockRecorder {
	return m.recorder
}

// AddSize mocks base method.
func (m *MockOptimizerInterface) AddSize(size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSize", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSize indicates an expected call of AddSize.
func (mr *MockOptimizerInterfaceMockRecorder) AddSize(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSize", reflect.TypeOf((*MockOptimizerInterface)(nil).AddSize), size)
}

// Calculate mocks base method.
func (m *MockOptimizerInterface) Calculate(itemsOrdered int) *optimizer.OptimizationResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calculate", itemsOrdered)
	ret0, _ := ret[0].(*optimizer.OptimizationResult)
	return ret0
}

// Calculate indicates an expected call of Calculate.
func (mr *MockOptimizerInterfaceMockRecorder) Calculate(itemsOrdered interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockOptimizerInterface)(nil).Calculate), itemsOrdered)
}

// GetAllSizes mocks base method.
func (m *MockOptimizerInterface) GetAllSizes() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSizes")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSizes indicates an expected call of GetAllSizes.
func (mr *MockOptimizerInterfaceMockRecorder) GetAllSizes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSizes", reflect.TypeOf((*MockOptimizerInterface)(nil).GetAllSizes))
}

// Load mocks base method.
func (m *MockOptimizerInterface) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockOptimizerInterfaceMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockOptimizerInterface)(nil).Load))
}

// RemoveSize mocks base method.
func (m *MockOptimizerInterface) RemoveSize(size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSize", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSize indicates an expected call of RemoveSize.
func (mr *MockOptimizerInterfaceMockRecorder) RemoveSize(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSize", reflect.TypeOf((*MockOptimizerInterface)(nil).RemoveSize), size)
}
